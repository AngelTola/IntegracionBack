datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  idUsuario         Int           @id @default(autoincrement())
  nombreCompleto     String        @db.VarChar(100)
  email              String        @unique @db.VarChar(100)
  contraseña         String?       @default("") @db.VarChar(255)
  fechaNacimiento    DateTime?
  telefono           String?
  registradoCon      RegistradoCon
  fechaRegistro      DateTime      @default(now())
  verificado         Boolean       @default(false)
  host               Boolean       @default(false)
  driverBool         Boolean       @default(false)
  fotoPerfil         String? @db.VarChar(255)
  codigoVerificacion String?
  bloqueado          Boolean   @default(false)
  fechaBloqueado     DateTime?
  intentosFallidos   Int       @default(0)
  direccion          String?
  esAdmin            Boolean            @default(false)

  edicionesNombre    Int       @default(0)
  edicionesFecha     Int       @default(0)
  edicionesTelefono  Int      @default(0)
  
  verificaciones      Verificaciones[]
  terminosCondiciones Terminos_condiciones[]

  notificaciones      Notificacion[]     
  autos               Auto[]             
  reservas            Reserva[]         
  comentariosEscritos Comentario[]
  calificacionesRecibidas CalificacionUsuario[] @relation("UsuarioCalificado")
  calificacionesRealizadas CalificacionUsuario[] @relation("UsuarioCalificador")

  // Relación con Driver (si este usuario es un driver)
  driver                 Driver? @relation("UsuarioDriver")

  // Relación muchos a muchos con drivers asignados
  driversAsignados       UsuarioDriver[]

  assignedToDriver Int?
  driverReferente  Driver? @relation("DriverToRenters", fields: [assignedToDriver], references: [idDriver])

  // Rentas como cliente
  rentas              Renta[]

  // Método de pago directo
  metodoPago            MetodoPago?
  numeroTarjeta         String?                @db.VarChar(16)
  fechaExpiracion       String?                @db.VarChar(5)
  titular               String?                @db.VarChar(100)
  imagenQr              String?                @db.VarChar(255)
  detallesMetodoPago    String?                @db.Text

  @@map("usuarios")
}

model Verificaciones {
  idCodigo    Int              @id @default(autoincrement())
  idUsuario  Int
  codigo      String           @db.VarChar(6)
  tipo        TipoVerificacion
  creadoEn    DateTime         @default(now())
  expiracion  DateTime
  usado       Boolean          @default(false)

  usuario Usuario @relation(fields: [idUsuario], references: [idUsuario])
}

model Terminos_condiciones {
  idAceptacion      Int      @id @default(autoincrement())
  idUsuario        Int
  versionTerminos   String   @db.VarChar(10)
  fechaAceptacion   DateTime

  usuario           Usuario  @relation(fields: [idUsuario], references: [idUsuario])
}

model Driver {
  idDriver          Int                @id @default(autoincrement())
  idUsuario        Int                @unique
  usuario           Usuario            @relation("UsuarioDriver", fields: [idUsuario], references: [idUsuario], onDelete: Cascade)
  sexo              String
  telefono          String
  licencia          String
  tipoLicencia      String?
  fechaEmision      DateTime
  fechaExpiracion   DateTime

  añosExperiencia   Int?               
  disponible        Boolean            @default(true)
  
  anversoUrl        String
  reversoUrl        String

  asignadoA         UsuarioDriver[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  renters           Usuario[] @relation("DriverToRenters")

  @@map("drivers")
}

model UsuarioDriver {
  id                Int                @id @default(autoincrement())
  idUsuario         Int               
  idDriver          Int                
  
  usuario           Usuario            @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade)
  driver            Driver             @relation(fields: [idDriver], references: [idDriver], onDelete: Cascade)
  
  fechaAsignacion   DateTime           @default(now())       
  
  @@unique([idUsuario, idDriver])     
  @@map("usuario_drivers")
  @@index([idUsuario])
  @@index([idDriver])
}

model Notificacion {
  idNotificacion  String                @id @default(uuid())
  idUsuario     Int
  titulo        String                @db.VarChar(100)
  mensaje       String
  idEntidad     String?
  tipoEntidad   String?               @db.VarChar(50)
  leido         Boolean               @default(false)
  leidoEn       DateTime?
  creadoEn      DateTime              @default(now())
  actualizadoEn DateTime              @updatedAt
  haSidoBorrada Boolean               @default(false)
  tipo          String
  prioridad     PrioridadNotificacion @default(MEDIA)
  usuario       Usuario               @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade)

  @@unique([idUsuario, idEntidad, tipo], name: "notificacionUnicaUsuarioEntidad")
  @@index([idUsuario])
  @@index([creadoEn])
  @@index([leido, idUsuario])
  @@index([idUsuario, haSidoBorrada])
}

model Renta {
  idRenta            String      @id @default(uuid())
  fechaInicio        DateTime
  fechaFin           DateTime
  montoTotal         Decimal     @db.Decimal(10, 2)
  kilometrajeInicial Int?
  kilometrajeFinal   Int?
  estatus            EstadoRenta @default(EN_CURSO)
  fechaAprobacion    DateTime
  idReserva          Int         @unique
  reserva            Reserva     @relation(fields: [idReserva], references: [idReserva], onDelete: Cascade)
  clienteId          Int         
  cliente            Usuario     @relation(fields: [clienteId], references: [idUsuario], onDelete: Cascade)
  idAuto             Int         
  auto               Auto        @relation(fields: [idAuto], references: [idAuto], onDelete: Cascade)
  
  calificacion       Calificacion?

  @@index([idRenta])
  @@index([idReserva])
}

model Comentario {
  idComentario      Int                @id @default(autoincrement())
  idAuto            Int
  auto              Auto               @relation(fields: [idAuto], references: [idAuto])
  idUsuario         Int                
  usuario           Usuario            @relation(fields: [idUsuario], references: [idUsuario])
  contenido         String?
  calificacion      Int                @db.SmallInt
  fechaCreacion     DateTime           @default(now())
  idReserva         Int?               @unique
  reserva           Reserva?           @relation(fields: [idReserva], references: [idReserva])
  
  // Nueva relación con Calificacion
  calificacionId    String?            @unique
  calificacionRenta Calificacion?      @relation(fields: [calificacionId], references: [idCalificacion])
    
  @@map("comentarios")
}

model Calificacion {
  idCalificacion String   @id @default(uuid())
  puntuacion    Int      @db.SmallInt
  idRenta       String   @unique 
  renta         Renta    @relation(fields: [idRenta], references: [idRenta], onDelete: Cascade)
  fechaCreacion DateTime @default(now())
  
  // Nueva relación opcional con Comentario
  comentario    Comentario?
    
  @@index([idRenta])
}

model Ubicacion {
  idUbicacion       Int                @id @default(autoincrement())
  nombre            String             @unique
  descripcion       String?
  latitud           Float            
  longitud          Float              
  esActiva          Boolean            @default(true)
  autos             Auto[]
  @@map("ubicaciones")
}

model Auto {
  idAuto      Int      @id @default(autoincrement())
  idPropietario     Int
  idUbicacion Int
  propietario       Usuario            @relation(fields: [idPropietario], references: [idUsuario])
  ubicacion         Ubicacion          @relation(fields: [idUbicacion], references: [idUbicacion])

  marca             String
  modelo            String
  descripcion       String?
  precioRentaDiario Decimal            @db.Decimal(10, 2)
  montoGarantia     Decimal            @db.Decimal(10, 2)
  kilometraje       Int                @default(0)
  comentarios       Comentario[]
  calificacionPromedio Float?
  totalComentarios  Int                @default(0)
  reservas          Reserva[]
  disponibilidad    Disponibilidad[]
  rentas            Renta[]

  tipo        String             
  año         Int
  placa       String   @db.VarChar(10)
  soat        String   @db.VarChar(50)
  color             String
  estado            EstadoAuto         @default(ACTIVO) 
  fechaAdquisicion  DateTime           @default(now())
  historialMantenimiento HistorialMantenimiento[]
  imagenes    Imagen[]
  asientos          Int                @default(5)
  capacidadMaletero Int                
  transmision       Transmision       
  combustible       Combustible        
  diasTotalRenta     Int?               
  vecesAlquilado     Int?               
  @@map("autos")
  @@index([idUbicacion])
}

model Imagen {
  idImagen          Int                @id @default(autoincrement())
  idAuto            Int
  auto              Auto               @relation(fields: [idAuto], references: [idAuto])
  direccionImagen   String             
  
  @@map("imagenes")
}

model Disponibilidad {
  idDisponibilidad  Int                @id @default(autoincrement())
  idAuto            Int
  auto              Auto               @relation(fields: [idAuto], references: [idAuto])
  fechaInicio       DateTime
  fechaFin          DateTime
  motivo            MotivoNoDisponibilidad
  descripcion       String?
  
  @@map("disponibilidad")
}

model Reserva {
  idReserva         Int                @id @default(autoincrement())
  fechaInicio       DateTime
  fechaFin          DateTime
  idAuto            Int
  auto              Auto               @relation(fields: [idAuto], references: [idAuto])
  idCliente         Int
  cliente           Usuario            @relation(fields: [idCliente], references: [idUsuario])
  estado            EstadoReserva      @default(SOLICITADA)
  fechaSolicitud    DateTime           @default(now())
  fechaAprobacion   DateTime?
  fechaLimitePago   DateTime           
  montoTotal        Decimal            @db.Decimal(10, 2) 
  kilometrajeInicial Int?
  kilometrajeFinal  Int?
  pagos             Pago[]
  garantia          Garantia?
  comentario        Comentario?       
  estaPagada        Boolean            @default(false) 
  calificacionUsuario CalificacionUsuario?
  
  // Relación con Renta
  renta             Renta?

  @@map("reservas")
}

model Pago {
  idPago            Int                @id @default(autoincrement())
  idReserva         Int
  reserva           Reserva            @relation(fields: [idReserva], references: [idReserva])
  monto             Decimal            @db.Decimal(10, 2)
  fechaPago         DateTime           @default(now())
  metodoPago        MetodoPago
  referencia        String?
  comprobante       String?
  tipo              TipoPago           @default(RENTA)  
  
  @@map("pagos")
}

model Garantia {
  idGarantia        Int                @id @default(autoincrement())
  idReserva         Int                @unique
  reserva           Reserva            @relation(fields: [idReserva], references: [idReserva])
  monto             Decimal            @db.Decimal(10, 2)
  fechaDeposito     DateTime           @default(now())
  fechaLiberacion   DateTime?
  estado            EstadoGarantia     @default(DEPOSITADA)
  comprobante       String?
  
  @@map("garantias")
}

model HistorialMantenimiento {
  idHistorial       Int                @id @default(autoincrement())
  idAuto            Int
  auto              Auto               @relation(fields: [idAuto], references: [idAuto])
  fechaInicio       DateTime           @default(now())
  fechaFin          DateTime?
  descripcion       String
  costo             Decimal?           @db.Decimal(10, 2)
  tipoMantenimiento TipoMantenimiento
  kilometraje       Int
  
  @@map("historial_mantenimiento")
}

model CalificacionUsuario {
  idCalificacion    Int                @id @default(autoincrement())
  idCalificador     Int                
  calificador       Usuario            @relation("UsuarioCalificador", fields: [idCalificador], references: [idUsuario])
  idCalificado      Int               
  calificado        Usuario            @relation("UsuarioCalificado", fields: [idCalificado], references: [idUsuario])
  puntuacion        Int                @db.SmallInt     
  comentario        String?            
  fechaCreacion     DateTime           @default(now())
  idReserva         Int                @unique          
  reserva           Reserva            @relation(fields: [idReserva], references: [idReserva])
  tipoCalificacion  TipoCalificacionUsuario
  
  @@map("calificaciones_usuarios")
  @@index([idCalificado])
  @@index([idCalificador])
}

enum TipoCalificacionUsuario {
  ARRENDADOR    
  ARRENDATARIO  
}

enum EstadoRenta {
  EN_CURSO
  FINALIZADA
  CANCELADA
}

enum EstadoReserva {
  SOLICITADA      
  APROBADA         
  RECHAZADA      
  CONFIRMADA    
  CANCELADA        
  EN_CURSO         
  FINALIZADA       
}

enum EstadoGarantia {
  DEPOSITADA
  LIBERADA
  RETENIDA
}

enum MetodoPago {
  TARJETA_DEBITO
  EFECTIVO
  QR
}

enum Transmision {
  AUTOMATICO
  MANUAL
}

enum Combustible {
  GASOLINA
  DIESEL
  ELECTRICO
  HIBRIDO
}

enum TipoMantenimiento {
  PREVENTIVO
  CORRECTIVO
  REVISION
}

enum EstadoAuto {
  ACTIVO          
  INACTIVO         
}

enum MotivoNoDisponibilidad {
  MANTENIMIENTO
  REPARACION
  USO_PERSONAL
  OTRO
}

enum TipoPago {
  RENTA
  GARANTIA
}

enum RolUsuario {
  ARRENDADOR
  RENTADOR
  DRIVER
}

enum PrioridadNotificacion {
  BAJA
  MEDIA
  ALTA
}

enum RegistradoCon {
  email
  google
}

enum TipoVerificacion {
  recuperacion
  verificacion
}